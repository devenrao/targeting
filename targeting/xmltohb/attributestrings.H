
#ifndef TARG_ATTRIBUTESTRINGS_H
#define TARG_ATTRIBUTESTRINGS_H

/**
 *  @file attributestrings.H
 *
 *  @brief Attribute string conversion routines.  This file is autogenerated
 *      and should not be altered.
 */

//******************************************************************************
// Includes
//******************************************************************************

// STD
#include <stdint.h>
#include <stdlib.h>

namespace TARGETING
{

/**
 *  @brief Class used to clarify compiler error when caller attempts to
 *      stringify an unsupported attribute
 */
class InvalidAttributeForStringification;

/**
 *  @brief Return attribute as a string
 *
 *  @param[in] i_attrValue Value of the attribute
 *
 *  @return String which decodes the attribute value
 */
template<const ATTRIBUTE_ID A>
const char* attrToString(
    typename AttributeTraits<A>::Type const& i_attrValue)
{
    // Default behavior is to fail the compile if caller attempts to print an
    // unsupported string
    #ifdef __HOSTBOOT_MODULE
        static_assert(A != A, "Must use an explicitly supported template "
                              "specialization");
    #else
        char mustUseTemplateSpecialization[A != A ? 1 : -1];
    #endif

    const char* retVal = NULL;
    return retVal;
}

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_CDM_DOMAIN>(
    AttributeTraits<ATTR_CDM_DOMAIN>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_CHECK_ATTN_AFTER_ISTEP_FAIL>(
    AttributeTraits<ATTR_CHECK_ATTN_AFTER_ISTEP_FAIL>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_CLASS>(
    AttributeTraits<ATTR_CLASS>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_EECACHE_VPD_STATE>(
    AttributeTraits<ATTR_EECACHE_VPD_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_EEPROM_CONTENT_TYPE>(
    AttributeTraits<ATTR_EEPROM_CONTENT_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_EEPROM_VPD_ACCESSIBILITY>(
    AttributeTraits<ATTR_EEPROM_VPD_ACCESSIBILITY>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_EEPROM_VPD_REDUNDANCY>(
    AttributeTraits<ATTR_EEPROM_VPD_REDUNDANCY>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_ENGINE_TYPE>(
    AttributeTraits<ATTR_ENGINE_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_FOUND_PRESENT_BY_SP>(
    AttributeTraits<ATTR_FOUND_PRESENT_BY_SP>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_FSI_MASTER_TYPE>(
    AttributeTraits<ATTR_FSI_MASTER_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_KEY_CLEAR_REQUEST>(
    AttributeTraits<ATTR_KEY_CLEAR_REQUEST>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_KEY_TRANSITION_STATE>(
    AttributeTraits<ATTR_KEY_TRANSITION_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_MODEL>(
    AttributeTraits<ATTR_MODEL>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_OCMB_FW_STATE>(
    AttributeTraits<ATTR_OCMB_FW_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PAYLOAD_KIND>(
    AttributeTraits<ATTR_PAYLOAD_KIND>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PROC_COMPATIBILITY_REQ>(
    AttributeTraits<ATTR_PROC_COMPATIBILITY_REQ>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PROC_MODULE_TYPE>(
    AttributeTraits<ATTR_PROC_MODULE_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_RISK_LEVEL_ORIGIN>(
    AttributeTraits<ATTR_RISK_LEVEL_ORIGIN>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_TYPE>(
    AttributeTraits<ATTR_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_SBE_STATE>(
    AttributeTraits<ATTR_SBE_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PAYLOAD_STATE>(
    AttributeTraits<ATTR_PAYLOAD_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PSI_LINK_STATE>(
    AttributeTraits<ATTR_PSI_LINK_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_FMBX_DMA_STATE>(
    AttributeTraits<ATTR_FMBX_DMA_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PNOR_PARTITION_SIDE>(
    AttributeTraits<ATTR_PNOR_PARTITION_SIDE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_SPL_WAKEUP_STATE>(
    AttributeTraits<ATTR_SPL_WAKEUP_STATE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_SPD_DRAM_DIMM_DEVICE_TYPE>(
    AttributeTraits<ATTR_SPD_DRAM_DIMM_DEVICE_TYPE>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_PRIMARY_MF_CLOCK>(
    AttributeTraits<ATTR_PRIMARY_MF_CLOCK>::Type const& i_attrValue);

/**
 *  @brief See attrToString<const ATTRIBUTE_ID A>
 */
template<>
const char* attrToString<ATTR_REDUNDANT_MF_CLOCKS>(
    AttributeTraits<ATTR_REDUNDANT_MF_CLOCKS>::Type const& i_attrValue);


} // End namespace TARGETING

#endif // TARG_ATTRIBUTESTRINGS_H

